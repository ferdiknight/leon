/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.sodao.leon.demo.typeahead.serializer.nat;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestElement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestElement\",\"namespace\":\"com.sodao.leon.demo.typeahead.serializer.nat\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"score\",\"type\":\"float\"},{\"name\":\"terms\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public int id;
  @Deprecated public long timestamp;
  @Deprecated public float score;
  @Deprecated public java.util.List<java.lang.CharSequence> terms;

  /**
   * Default constructor.
   */
  public TestElement() {}

  /**
   * All-args constructor.
   */
  public TestElement(java.lang.CharSequence name, java.lang.Integer id, java.lang.Long timestamp, java.lang.Float score, java.util.List<java.lang.CharSequence> terms) {
    this.name = name;
    this.id = id;
    this.timestamp = timestamp;
    this.score = score;
    this.terms = terms;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return id;
    case 2: return timestamp;
    case 3: return score;
    case 4: return terms;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: id = (java.lang.Integer)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: score = (java.lang.Float)value$; break;
    case 4: terms = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'score' field.
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(java.lang.Float value) {
    this.score = value;
  }

  /**
   * Gets the value of the 'terms' field.
   */
  public java.util.List<java.lang.CharSequence> getTerms() {
    return terms;
  }

  /**
   * Sets the value of the 'terms' field.
   * @param value the value to set.
   */
  public void setTerms(java.util.List<java.lang.CharSequence> value) {
    this.terms = value;
  }

  /** Creates a new TestElement RecordBuilder */
  public static com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder newBuilder() {
    return new com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder();
  }
  
  /** Creates a new TestElement RecordBuilder by copying an existing Builder */
  public static com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder newBuilder(com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder other) {
    return new com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder(other);
  }
  
  /** Creates a new TestElement RecordBuilder by copying an existing TestElement instance */
  public static com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder newBuilder(com.sodao.leon.demo.typeahead.serializer.nat.TestElement other) {
    return new com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder(other);
  }
  
  /**
   * RecordBuilder for TestElement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestElement>
    implements org.apache.avro.data.RecordBuilder<TestElement> {

    private java.lang.CharSequence name;
    private int id;
    private long timestamp;
    private float score;
    private java.util.List<java.lang.CharSequence> terms;

    /** Creates a new Builder */
    private Builder() {
      super(com.sodao.leon.demo.typeahead.serializer.nat.TestElement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing TestElement instance */
    private Builder(com.sodao.leon.demo.typeahead.serializer.nat.TestElement other) {
            super(com.sodao.leon.demo.typeahead.serializer.nat.TestElement.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.score)) {
        this.score = data().deepCopy(fields()[3].schema(), other.score);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.terms)) {
        this.terms = data().deepCopy(fields()[4].schema(), other.terms);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder setId(int value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'id' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder clearId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'score' field */
    public java.lang.Float getScore() {
      return score;
    }
    
    /** Sets the value of the 'score' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder setScore(float value) {
      validate(fields()[3], value);
      this.score = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'score' field has been set */
    public boolean hasScore() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'score' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder clearScore() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'terms' field */
    public java.util.List<java.lang.CharSequence> getTerms() {
      return terms;
    }
    
    /** Sets the value of the 'terms' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder setTerms(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.terms = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'terms' field has been set */
    public boolean hasTerms() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'terms' field */
    public com.sodao.leon.demo.typeahead.serializer.nat.TestElement.Builder clearTerms() {
      terms = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public TestElement build() {
      try {
        TestElement record = new TestElement();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.Integer) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.score = fieldSetFlags()[3] ? this.score : (java.lang.Float) defaultValue(fields()[3]);
        record.terms = fieldSetFlags()[4] ? this.terms : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
